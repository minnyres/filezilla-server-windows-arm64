name: Build for Windows ARM64

on:
  workflow_dispatch:
  push:
    tags:
    - '*'

jobs:
  build-windows-arm64:
    name: Build
    runs-on: ubuntu-latest
    env:
      llvm_path: "${{ github.workspace }}/llvm-mingw"
      libfilezilla_version: "0.46.0"
      libfilezilla_path: "${{ github.workspace }}/libfilezilla-windows-arm64"
      filezilla_server_version: "1.8.1"
      filezilla_server_path: "${{ github.workspace }}/filezilla-server-windows-arm64"
      wxwidgets_version: "3.2.4"
      wxwidgets_path: "${{ github.workspace }}/wxmsw-windows-arm64"
      target: "aarch64-w64-mingw32"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install tools
        run: |
          sudo apt update
          sudo apt install \
            gcc git cmake ninja-build nsis pkg-config p7zip libtool make colormake gettext automake autoconf autogen autopoint patch wx-common
          wget https://github.com/mstorsjo/llvm-mingw/releases/download/20231128/llvm-mingw-20231128-ucrt-ubuntu-20.04-x86_64.tar.xz
          tar -xf llvm-mingw-*.tar.xz
          rm llvm-mingw-*.tar.xz
          mv llvm-mingw-* llvm-mingw
          wget https://nsis.sourceforge.io/mediawiki/images/4/4a/AccessControl.zip
          wget https://nsis.sourceforge.io/mediawiki/images/0/0f/ExecDos.zip
          7z x AccessControl.zip
          7z x ExecDos.zip
          sudo cp  Plugins/i386-unicode/AccessControl.dll /usr/share/nsis/Plugins/x86-unicode/
          sudo cp  Plugins/x86-unicode/ExecDos.dll /usr/share/nsis/Plugins/x86-unicode/
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh
          
      - name: Install libraries from vcpkg
        run: |
          export PATH=${{ env.llvm_path }}/bin:$PATH
          cd vcpkg
          sed -i 's/PATCHES/PATCHES\nclang-gettime.patch/g' ports/libgnutls/portfile.cmake
          sed -i 's/OPTIONS/OPTIONS\n--disable-hardware-acceleration/g' ports/libgnutls/portfile.cmake
          cp ${{ github.workspace }}/patches/clang-gettime.patch ports/libgnutls
          # tell vcpkg to only build Release variants of the dependencies
          mkdir triplets_overlay
          cp triplets/community/arm64-mingw-static.cmake triplets_overlay/arm64-mingw-static-release.cmake
          echo "set(VCPKG_BUILD_TYPE release)" >> triplets_overlay/arm64-mingw-static-release.cmake
          # clear buildtrees after each package installation to reduce disk space requirements
          packages="libgnutls sqlite3"
          ./vcpkg upgrade \
            --overlay-triplets=triplets_overlay \
            --no-dry-run
          ./vcpkg install \
            --overlay-triplets=triplets_overlay \
            --clean-after-build \
            --triplet=arm64-mingw-static-release \
            $packages
          cd ${{ github.workspace }}/vcpkg/installed/arm64-mingw-static-release/lib
          ln -s libzlib.a libz.a

      - name: Build wxwidgets
        run: |
          export PATH=${{ env.llvm_path }}/bin:$PATH
          export PKG_CONFIG_PATH=${{ github.workspace }}/vcpkg/installed/arm64-mingw-static-release/lib/pkgconfig
          export CPPFLAGS="-I${{ github.workspace }}/vcpkg/installed/arm64-mingw-static-release/include"
          export LDFLAGS="-L${{ github.workspace }}/vcpkg/installed/arm64-mingw-static-release/lib"
          wget https://github.com/wxWidgets/wxWidgets/releases/download/v${{ env.wxwidgets_version }}/wxWidgets-${{ env.wxwidgets_version }}.tar.bz2
          tar xf wxWidgets-${{ env.wxwidgets_version }}.tar.bz2
          cd wxWidgets-${{ env.wxwidgets_version }}
          ./configure --host=${{ env.target }} --prefix=${{ env.wxwidgets_path }} --with-zlib=sys --with-msw --with-libiconv-prefix=${{ github.workspace }}/vcpkg/installed/arm64-mingw-static-release --disable-shared --disable-debug_flag --enable-optimise --enable-unicode
          make -j$(nproc) && make install

      - name: Build libfilezilla
        run: |
          export PATH=${{ env.llvm_path }}/bin:$PATH
          export PKG_CONFIG_PATH=${{ github.workspace }}/vcpkg/installed/arm64-mingw-static-release/lib/pkgconfig
          export CPPFLAGS="-I${{ github.workspace }}/vcpkg/installed/arm64-mingw-static-release/include"
          export LDFLAGS="-L${{ github.workspace }}/vcpkg/installed/arm64-mingw-static-release/lib"
          wget https://download.filezilla-project.org/libfilezilla/libfilezilla-${{ env.libfilezilla_version }}.tar.xz
          tar xf libfilezilla-${{ env.libfilezilla_version }}.tar.xz
          cd libfilezilla-${{ env.libfilezilla_version }}
          ./configure --host=${{ env.target }} --prefix=${{ env.libfilezilla_path }} --disable-shared --enable-static 
          make -j$(nproc) && make install

      - name: Build filezilla server
        run: |
          export PATH=${{ env.llvm_path }}/bin:${{ env.wxwidgets_path }}/bin:$PATH
          export PKG_CONFIG_PATH=${{ github.workspace }}/vcpkg/installed/arm64-mingw-static-release/lib/pkgconfig:${{ env.libfilezilla_path }}/lib/pkgconfig
          export CPPFLAGS="-D STRSAFE_NO_DEPRECATE -I${{ github.workspace }}/vcpkg/installed/arm64-mingw-static-release/include -I${{ env.libfilezilla_path }}/include"
          export LDFLAGS="--static -L${{ github.workspace }}/vcpkg/installed/arm64-mingw-static-release/lib -L${{ env.libfilezilla_path }}/lib"
          wget https://download.filezilla-project.org/server/FileZilla_Server_${{ env.filezilla_server_version }}_src.tar.xz
          tar xf FileZilla_Server_${{ env.filezilla_server_version }}_src.tar.xz
          cd filezilla-server-${{ env.filezilla_server_version }}
          ./configure --host=${{ env.target }} --prefix=${{ env.filezilla_server_path }} --disable-shared --enable-static --with-pugixml=builtin --with-wx-config=${{ env.wxwidgets_path }}/bin/wx-config
          make -j$(nproc) 
          sed -i 's/PROGRAMFILES"/PROGRAMFILES64"/g' pkg/windows/install.nsi
          find . -name "*.exe" -exec ${{ env.target }}-strip {} \;
          make pkg-exe
          
      - name: Prepare build artifacts
        run: |
          cp filezilla-server-${{ env.filezilla_server_version }}/pkg/windows/FileZilla_Server_${{ env.filezilla_server_version }}_win64-setup.exe \
           ./FileZilla_Server_${{ env.filezilla_server_version }}_arm64-setup.exe

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: filezilla_server_${{ env.filezilla_server_version }}_arm64
          path: ./FileZilla_Server_${{ env.filezilla_server_version }}_arm64-setup.exe

      - name: Batch release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./FileZilla_Server_${{ env.filezilla_server_version }}_arm64-setup.exe